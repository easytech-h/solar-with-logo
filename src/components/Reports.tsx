import React, { useState, useMemo } from 'react';
import { useSales } from '../context/SalesContext';
import { useInventory } from '../context/InventoryContext';
import { useAuth } from '../context/AuthContext';
import { useUser } from '../context/UserContext';
import { Search, Filter, Calendar, Download, Users, Printer } from 'lucide-react';
import PrintStyles from './PrintStyles';

const Reports: React.FC = () => {
  const { sales } = useSales();
  const { products } = useInventory();
  const { user, isAdmin } = useAuth();
  const { users } = useUser();
  const [searchTerm, setSearchTerm] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [selectedCashier, setSelectedCashier] = useState('all');

  const getCashierName = (userId: string) => {
    const foundUser = users.find(u => u.id === userId);
    return foundUser?.fullName || userId;
  };

  const filteredSales = useMemo(() => {
    return sales.filter(sale => {
      const searchMatch = searchTerm ? (
        sale.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
        getCashierName(sale.cashier).toLowerCase().includes(searchTerm.toLowerCase()) ||
        sale.items.some(item => {
          const product = products.find(p => p.id === item.productId);
          return product?.name.toLowerCase().includes(searchTerm.toLowerCase());
        })
      ) : true;

      const dateMatch = (!startDate || new Date(sale.date) >= new Date(startDate)) &&
                       (!endDate || new Date(sale.date) <= new Date(endDate));

      const cashierMatch = selectedCashier === 'all' || sale.cashier === selectedCashier;

      return searchMatch && dateMatch && cashierMatch;
    }).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
  }, [sales, searchTerm, startDate, endDate, selectedCashier, products]);

  const totalAmount = useMemo(() => 
    filteredSales.reduce((sum, sale) => sum + sale.total, 0),
    [filteredSales]
  );

  const totalItems = useMemo(() => 
    filteredSales.reduce((sum, sale) => 
      sum + sale.items.reduce((itemSum, item) => itemSum + item.quantity, 0), 0),
    [filteredSales]
  );

  const totalDiscount = useMemo(() =>
    filteredSales.reduce((sum, sale) => sum + sale.discount, 0),
    [filteredSales]
  );

  const totalNetSales = useMemo(() =>
    filteredSales.reduce((sum, sale) => sum + (sale.total - sale.discount), 0),
    [filteredSales]
  );

  const handleExport = () => {
    const headers = [
      'Date',
      'Sale ID',
      'Type',
      'Cashier',
      'Customer',
      'Products',
      'Subtotal',
      'Discount',
      'Total',
      'Payment',
      'Change'
    ];

    const rows = filteredSales.map(sale => [
      new Date(sale.date).toLocaleString('fr-FR'),
      sale.id,
      sale.type || 'direct',
      getCashierName(sale.cashier),
      sale.customerName || 'Walk-in Customer',
      sale.items.map(item => {
        const product = products.find(p => p.id === item.productId);
        return `${product?.name || 'Unknown'} (x${item.quantity})`;
      }).join('; '),
      sale.subtotal.toFixed(2),
      sale.discount.toFixed(2),
      sale.total.toFixed(2),
      sale.paymentReceived.toFixed(2),
      sale.change.toFixed(2)
    ]);

    // Add grand totals
    const grandTotals = [
      '',
      'GRAND TOTALS',
      '',
      '',
      '',
      `Total Items: ${totalItems}`,
      filteredSales.reduce((sum, sale) => sum + sale.subtotal, 0).toFixed(2),
      totalDiscount.toFixed(2),
      totalAmount.toFixed(2),
      filteredSales.reduce((sum, sale) => sum + sale.paymentReceived, 0).toFixed(2),
      filteredSales.reduce((sum, sale) => sum + sale.change, 0).toFixed(2)
    ];

    const csvContent = [
      'UP2DATE FASHION - Sales Report',
      `Generated: ${new Date().toLocaleString('fr-FR')}`,
      `Generated by: ${user?.fullName || 'System'}`,
      `Period: ${startDate || 'All time'} to ${endDate || 'Present'}`,
      `Cashier: ${selectedCashier === 'all' ? 'All Cashiers' : getCashierName(selectedCashier)}`,
      '',
      headers.join(','),
      ...rows.map(row => row.join(',')),
      '',
      grandTotals.join(',')
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `sales_report_${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
  };

  const handlePrint = () => {
    window.print();
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <PrintStyles />
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Sales Report</h1>
        <div className="flex space-x-2">
          <button
            onClick={handlePrint}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            <Printer className="inline-block mr-2" size={18} />
            Print Report
          </button>
          <button
            onClick={handleExport}
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
          >
            <Download className="inline-block mr-2" size={18} />
            Export CSV
          </button>
        </div>
      </div>

      <div className="print-section">
        <div className="print-header">
          
          <h1 className="text-3xl font-bold">FC SOLAR SOLUTION ENERGIE </h1>
          <h2 className="text-xl">Sales Report</h2>
          <p className="text-sm text-gray-600">
            Generated on: {new Date().toLocaleString('fr-FR')}
          </p>
          <p className="text-sm text-gray-600">
            Period: {startDate || 'All time'} to {endDate || 'Present'}
          </p>
          {selectedCashier !== 'all' && (
            <p className="text-sm text-gray-600">
              Cashier: {getCashierName(selectedCashier)}
            </p>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-lg font-semibold mb-2">Total Sales</h3>
            <p className="text-3xl font-bold text-green-600">
              HTG {totalAmount.toFixed(2)}
            </p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-lg font-semibold mb-2">Items Sold</h3>
            <p className="text-3xl font-bold text-blue-600">{totalItems}</p>
          </div>
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-lg font-semibold mb-2">Total Transactions</h3>
            <p className="text-3xl font-bold text-purple-600">{filteredSales.length}</p>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6 mb-6 no-print">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="relative">
              <input
                type="text"
                placeholder="Search sales..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border rounded"
              />
              <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
            </div>

            <div className="flex items-center space-x-2">
              <Calendar className="text-gray-400" size={18} />
              <input
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                className="flex-1 p-2 border rounded"
              />
              <span>to</span>
              <input
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                className="flex-1 p-2 border rounded"
              />
            </div>

            {isAdmin && (
              <div className="flex items-center space-x-2">
                <Users className="text-gray-400" size={18} />
                <select
                  value={selectedCashier}
                  onChange={(e) => setSelectedCashier(e.target.value)}
                  className="flex-1 p-2 border rounded"
                >
                  <option value="all">All Cashiers</option>
                  {users.map(user => (
                    <option key={user.id} value={user.id}>
                      {user.fullName}
                    </option>
                  ))}
                </select>
              </div>
            )}
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md">
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sale ID</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                  {isAdmin && (
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cashier</th>
                  )}
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Products</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Discount</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Net Paid</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredSales.map((sale) => (
                  <tr key={sale.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {new Date(sale.date).toLocaleString('fr-FR')}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">{sale.id}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        sale.type === 'order' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'
                      }`}>
                        {sale.type || 'direct'}
                      </span>
                    </td>
                    {isAdmin && (
                      <td className="px-6 py-4 whitespace-nowrap">
                        {getCashierName(sale.cashier)}
                      </td>
                    )}
                    <td className="px-6 py-4 whitespace-nowrap">
                      {sale.customerName || 'Walk-in Customer'}
                    </td>
                    <td className="px-6 py-4">
                      <ul className="list-disc list-inside">
                        {sale.items.map((item, index) => {
                          const product = products.find(p => p.id === item.productId);
                          return (
                            <li key={index}>
                              {product?.name || 'Unknown Product'} (x{item.quantity})
                            </li>
                          );
                        })}
                      </ul>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      HTG {sale.total.toFixed(2)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      HTG {sale.discount.toFixed(2)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      HTG {(sale.total - sale.discount).toFixed(2)}
                    </td>
                  </tr>
                ))}
                {filteredSales.length === 0 && (
                  <tr>
                    <td colSpan={isAdmin ? 9 : 8} className="px-6 py-4 text-center text-gray-500">
                      No sales found
                    </td>
                  </tr>
                )}
              </tbody>
              <tfoot className="bg-gray-50 font-bold">
                <tr>
                  <td colSpan={isAdmin ? 6 : 5} className="px-6 py-4 text-right">Grand Total:</td>
                  <td className="px-6 py-4 whitespace-nowrap">HTG {totalAmount.toFixed(2)}</td>
                  <td className="px-6 py-4 whitespace-nowrap">HTG {totalDiscount.toFixed(2)}</td>
                  <td className="px-6 py-4 whitespace-nowrap">HTG {totalNetSales.toFixed(2)}</td>
                </tr>
              </tfoot>
            </table>
          </div>
        </div>

        <div className="print-footer">
          <p className="text-sm text-gray-500">End of Report</p>
          <p className="text-xs text-gray-400">FC SOLAR SOLUTION ENERGIE  - All rights reserved</p>
          <p className="text-xs text-gray-400">Tel: (509) 4104-7284 / 4068-0436</p>
        </div>
      </div>
    </div>
  );
};

export default Reports;